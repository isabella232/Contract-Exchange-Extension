<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<rfc category="info" docName="openid-trust-exchange-extension-1_0"
     ipr="full3978">
  <?xml-stylesheet type='text/xsl' href='http://xml.resource.org/authoring/rfc2629.xslt' ?>
  <?rfc toc="yes" ?>
  <?rfc tocdepth="2" ?>
  <?rfc symrefs="yes" ?>
  <?rfc sortrefs="yes"?>
  <?rfc iprnotified="no" ?>
  <?rfc strict="yes" ?>
  <?rfc private="Draft" ?>
  <?rfc comments="no" ?>
  <front>
    <title abbrev=" CX">Contract Exchange Extension 1.0 - Draft 3</title>

    <author fullname="Nat Sakimura" initials="N.S" surname="Sakimura">
      <organization abbrev="NRI">Nomura Research Institute,
      Ltd.</organization>

      <address>
        <postal>
          <street>Marunouchi Kitaguchi Building, 1-6-5 Marunouchi</street>
          <city>Chiyoda-ku</city>
          <region>Tokyo</region>
          <code>100-0005</code>
          <country>Japan</country>
        </postal>

        <email>n-sakimura@nri.co.jp</email>

        <uri>http://www.nri.co.jp/</uri>
      </address>
    </author>

    <author fullname="Masaki Nishitani" initials="M.N" surname="Nishitani">
      <organization abbrev="NRI">Nomura Research Institute,
      Ltd.</organization>

      <address>
        <postal>
          <street>Marunouchi Kitaguchi Building, 1-6-5 Marunouchi</street>
          <city>Chiyoda-ku</city>
          <region>Tokyo</region>
          <code>100-0005</code>
          <country>Japan</country>
        </postal>

        <email>m-nishitani@nri.co.jp</email>

        <uri>http://www.nri.co.jp/</uri>
      </address>
    </author>

    <author fullname="Hideki Nara" initials="H.N" surname="Nara">
      <organization>TACT Communications,Inc</organization>

      <address>
        <postal>
          <street>Cross Side Building , 3-52-1 Sendagaya</street>
          <city>Shibuya-ku</city>
          <region>Tokyo</region>
          <code>151-0051</code>
          <country>Japan</country>
        </postal>

        <email>hdknr@ic-tact.co.jp</email>

        <uri>http://www.ic-tact.co.jp</uri>
      </address>
    </author>

    <date day="01" month="December" year="2010" />

    <abstract>
    <t> This extension defines 1) an extensible Contract format, 2) protocol to exchange the Contract, 3)protocol to share personal information based on the Contract and 4)protocol to provide access log.
The Proposer creates a signed Proposal which describes  what personal information is wanted and send it to the Signatory specified the End User.
The Signatory, upon agreeing to it, signs agreements and provides the Contract.
The combination of the Proposal and Contract is the mutually signed and is potentially legally binding.
This Contract needs to be stored by all bound parties for a given length of time, usually spanning over many years depending on jurisdictions.
</t>
<t> As these document size may be large while the user agent capability may be limited (e.g., mobile phones), sending them via direct communication and passing only the small reference called "Artifact" through the user agents are advisable. Therefore, as the protocol, use of Artifact Binding is strongly recommended. </t>
    </abstract>
  </front>
  <middle>

    <section title="Terminology">
      <section title="Requirements Notation">
                <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
        document are to be interpreted as described in <xref target="RFC2119" /> .
        </t>
      </section>

      <section title="Definitions and Conventions">
        <t> All OpenID 2.0 Artifact Binding messages that contain OpenID Contract Exchange (CX) JSON node MUST contain "type" member starts with the following URI.</t>
<figure>
    <artwork><![CDATA[
http://openid.net/specs/cx/1.0/ 
    ]]></artwork>
</figure>
<t/>
<t> Variety of sub class message contains fragments at the end of the type URI.</t>
      </section>

      <section title="Terms">
        <t>In addition to the terminology used in <xref target="OPENID_AB">OpenID Artifact Binding 1.0</xref>, following terms are used. </t>
<t>
    <list style="symbols">
        
            <t> Party
                <list style="symbols">
                    
                        <t>Entity which is bound to a contract and one of Client , Server , Proposer and Signatory.</t>
                    
                        <t>Party may be a web server or a smart device client.
</t>
                    
                </list>
            </t>
        
            <t> End User
                <list style="symbols">
                    
                        <t>Person who has privillege of controlling Personal Information. End User MUST be identified at OpenID Provider and MAY authorize Contract to be signed and valid.
</t>
                    
                </list>
            </t>
        
            <t> Personal Information
                <list style="symbols">
                    
                        <t>Data which is own by End User and  can be accessed to permitted Party.
</t>
                    
                </list>
            </t>
        
            <t> Contract
                <list style="symbols">
                    
                        <t>Document to prove that Party can access Personal Information under stated condition.
</t>
                    
                </list>
            </t>
        
            <t> Client
                <list style="symbols">
                    
                        <t>Personal Information user. <xref target="OPENID_AB">OpenID Artifact Binding 1.0</xref> Relying Party.
</t>
                    
                </list>
            </t>
        
            <t> Server
                <list style="symbols">
                    
                        <t>Personal Information keeper.  Exposes the Personal Information endpoint. <xref target="OPENID_AB">OpenID Artifact Binding 1.0</xref> Relying Party.
</t>
                    
                </list>
            </t>
        
            <t> Proposer
                <list style="symbols">
                    
                        <t>Contract process initiator. Orchestrates the process of data access authorization between Clients and Server with the help of Signatory. <xref target="OPENID_AB">OpenID Artifact Binding 1.0</xref> Relying Party.
</t>
                    
                </list>
            </t>
        
            <t> Signatory
                <list style="symbols">
                    
                        <t>Contract signer in the charge of the End User. <xref target="OPENID_AB">OpenID Artifact Binding 1.0</xref> Provider.
</t>
                    
                </list>
            </t>
        
            <t> Request
                <list style="symbols">
                    
                        <t>Document to describe what data is wanted by Client
</t>
                    
                </list>
            </t>
        
            <t> Proposal
                <list style="symbols">
                    
                        <t>Document to hold a couple of Request and delivered to Signatory by Proposer to start the CX process.
</t>
                    
                </list>
            </t>
        
            <t> Acceptance
                <list style="symbols">
                    
                        <t>Document to describe how the personal information can be accessed.
</t>
                    
                </list>
            </t>
        
            <t> Contract Part
                <list style="symbols">
                    
                        <t>Document which compose Contract and hold a couple of Acceptance and securely distributed to specific Party.
</t>
                    
                </list>
            </t>
        
            <t> Token
                <list style="symbols">
                    
                        <t>Signed JSON object which serialized into a formated string. Format is defined in <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref>.
</t>
                    
                </list>
            </t>
        
            <t> Service
                <list style="symbols">
                    
                        <t>Data or experience provided by Proposer to End User. Some Services consist of couple of End User's Personal Information which are provided by Server and used by Client. Parties MUST fulfill Contract to collaborate to provide Service.
</t>
                    
                </list>
            </t>
        
            <t> PPID
                <list style="symbols">
                    
                        <t>Stands for "Pairwise Pseudonymous Identifier" or "Private Personal Identifier". It is End User's identifier asserted by Signatory to each specific OpenID Relying party including Client, Server or Proposer.</t>
                    
                </list>
            </t>
        
    </list>
</t>

      </section>

    </section>

    <section title="Overview">
        <t>The contract exchange extension(CX) is OpenID extension identified by the URI "http://openid.net/srv/cx/1.0/#". The contract is the document to prove that all parties bound to that have rights and obligations on consuming and providing services between each other.</t>
<t/>
<t>CX protocol is based on  <xref target="OPENID_AB">OpenID Artifact Binding 1.0</xref> and some <xref target="JSON">JSON(Javascript Object Notation)</xref> messages structure used in CX are defined to exchange non-repudiate message. When an End User starts consuming a CX-based service at a RP(Proposer), the RP compose a Proposal JSON which is compiled with OpenID Artifact Binding Request files defined by parties to be bound to the CX service and contract. The RP starts OpenID Artifact Binding session with the Proposal to the OP(Signatory) specified by the End User, the End User is authenticated at the OP and agrees to compose the CX Contract, and finally the OP provides the CX Contract in OpenID Artifact Binding assertion to the RP.</t>
<t/>
<t>With sharing Contract in advance and presenting Contract identfier at specified endpoints, the RP and other Parties bound to the Contract can be authenticated and request data services.</t>


<t>
The following is a squence of main flow of OpenID Contract Exchange.
</t>

<section title="Propser and Clients">

<t>
Proposer, as a OpenID Relying Party, provides service experience to End User who is asserted by OpenID OP and has a principal at the Proposer.
Other OpenID Relying Parties, Clients, MAY teams with Proposer to provide those services.
Proposer and Client MAY use Personal Information which End User manages at the other OpenID Relying Parties, Servers.
</t>
<t>
To use Personal Information, Proposer and Clients MUST provide  Request file which describes what kind of Personal Information they want to use.
</t>

<figure>
    <artwork><![CDATA[
+-------------------------------+
| <Proposal>                    |
|                               |
|  reqs:                        |
|  +-------------------------+  |
|  | +---------------------+ |  |
|  | | <Request>(Client 1) | |  | 
|  | +---------------------+ |  |
|  | | <Request>(Client 2) | |  | 
|  | +---------------------+ |  |
|  | | <Request>(........) | |  | 
|  | +---------------------+ |  |
|  | | <Request>(Client N) | |  | 
|  | +---------------------+ |  |
|  | | <Request>(Proposer) | |  | 
|  | +---------------------+ |  |
|  +-------------------------+  |
|                               |
+-------------------------------+
    ]]></artwork>
</figure>

<t>
Because Proposer is just another Client when it want to use Personal Information, there is no difference in architecuture between Reqeust of Clients and Request of Proposer.
</t>

</section>

<section title="OpenID Artifaict Binding">
<t>
If End User want to use the service provided by Proposer,  Proposer initiates an OpenID Artifact Binding session.
Proposer compiles all Request from Clients and Proposer itself to Proposal and add it OpenID request as CX extension.
OpenID Artifact Binding request is sent to Signatory which is an OpenID OP in CX term because it signs contract in charge of End User.
</t>
</section>

<section title="Signatory and Contract Parts">
<t>
If the End User agree to create Contract,  Signatory provides Contract Part for each Proposer and Client. 
Contract Part includes Acceptance file in which End Users identifier  and the endpoint of his/her Personal Information are stated.
All Contract Parts share a single identifier, Contract Identifier, which ensure all parties are bound to a single Contract.
</t>

<t>
Here is a sample Contract Part to be provieded to Server N which is going to be requested Personal Information by several Clients.
</t>

<figure>
    <artwork><![CDATA[
+------------------------------------+
| <Contract Part>                    |
|                                    |
|  party_id :                        |
|    "URL of Server N"               |
|                                    |
|  contract_id :                     |
|    http://op.net/contract/4321435  |
|                                    |
|  acceptances:                      |
|  +----------------------------+    |
|  | +------------------------+ |    |
|  | | <Acceptance>           | |    |
|  | | (Client a - Server N)) | |    | 
|  | +------------------------+ |    |
|  | | <Acceptance>           | |    |
|  | | (Client b - Server N)) | |    | 
|  | +------------------------+ |    |
|  | | ............           | |    |
|  | +------------------------+ |    |
|  | | <Acceptance>           | |    |
|  | | (Client z - Server N)) | |    | 
|  | +------------------------+ |    |
|  +----------------------------+    |
|                                    |
+------------------------------------+
    ]]></artwork>
</figure>

<t>
Also here is a sample Contract Part to be provieded to Client A which is going to request Personal Information to several Servers.
</t>

<figure>
    <artwork><![CDATA[
+------------------------------------+
| <Contract Part>                    |
|                                    |
|  party_id :                        |
|    "URL of Client A"               |
|                                    |
|  contract_id :                     |
|    http://op.net/contract/4321435  |
|                                    |
|  acceptances:                      |
|  +----------------------------+    |
|  | +------------------------+ |    |
|  | | <Acceptance>           | |    |
|  | | (Client A - Server 1)) | |    | 
|  | +------------------------+ |    |
|  | | <Acceptance>           | |    |
|  | | (Client A - Server 2)) | |    | 
|  | +------------------------+ |    |
|  | | ............           | |    |
|  | +------------------------+ |    |
|  | | <Acceptance>           | |    |
|  | | (Client A - Server N)) | |    | 
|  | +------------------------+ |    |
|  +----------------------------+    |
|                                    |
+------------------------------------+
    ]]></artwork>
</figure>

<t>
All Clients, Proposer, Server and Signatory will have its own Contract Part. Acceptances are included only in requester parties or responder parties.
</t>
</section>

<section title="OpenID Assertion and Contract Parts">
<t>
Proposer MAY obtain its Contract Part which is included in OpenID Artifact Binding Assertion as an extension parameter.
Proposer MAY notify Contract Identifier to Client in the other process.

</t>
</section>

<section title="Contract Identifier as Endpoint">
<t>
Because Contract Identifier is the endpoint of Contract Parts, any bound party MAY request its Contract Part to the endpoint.
Contract Part MUST be encrypted in JSON Simple Encryption with the party's public key.

</t>
</section>

<section title="Personal Information Request">
<t>
Clients or Proposer MAY request Personal Information to the endpoint stated in Acceptance of its own Contract Part.
Server MUST encrypt response  in JSON Simple Encryption with the requester's public key.
</t>
</section>

<section title="Access Log">
<t>
Servers MUST provide access log bound to the Contract to at least Signatory. Signatory in turn MUST provide those log to End User in some way.
</t>
</section>
    </section>

    <section title="Files">
        <t>CX exchange Contract JSON by extending <xref target="OPENID_AB">OpenID Artifact Binding 1.0</xref> protocol. <xref target="JSON">JSON(Javascript Object Notation)</xref> is the default document format, the extended <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref> is used for digital signature and the extended <xref target="JSON_SIMPLE_ENC_1_0">JSON Simple Encryption 1.0</xref> is used for asymmetric encryption with public key infrastructure.</t>

<section title="JSON and Token">
    <t>CX uses JSON format which is used in <xref target="OPENID_AB">OpenID Artifact Binding 1.0</xref> Request file and assertion. All file used for CX MUST have "type" member in a JSON object( enclosed in open and close curly braces ) and the value of "type" MUST be URI and start with :</t>

<figure>
    <artwork><![CDATA[
http://openid.net/specs/cx/1.0/
    ]]></artwork>
</figure>

<t>CX JSON object MAY optionally have "id" member for specifying any particular JSON object. "id" MUST be a URI uniquely allocated by the creating party.</t>

<t>So, a generic CX JSON object likes like the following</t>

<figure>
    <artwork><![CDATA[
{
    "type" : "http://openid.net/specs/cx/1.0/",
    "id"   : "http://rp.net/432144395df"
}
    ]]></artwork>
</figure>

<section title="Extending CX JSON">
<t>
Although any CX JSON object MUST have members specified for  "type", any other member MAY be used if parties agree the meaning of it.  Any CX JSON MAY has any other JSON object as a member in itself. If a member is a JSON object,  "type" and "id" SHOULD be checked firstly and this should be done recursively.
</t>
</section>

<section title="Signed JSON and Token">
<t>
Some CX JSON object MUST be digitally signed  to prove a particular JSON object's composer.
 <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref> is the default format. Some CX JSON is enveloped by <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref> .
Signed CX JSON is formed in the "Web Token Serialization" defined in <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref>. Following the sample of signed and tokenized CX JSON.
</t>
<figure>
    <artwork><![CDATA[
      6a82841eea9c17677083b2965bc4e51e0e8e22e208121ab69711b3e5918c6677.eyAndGVzdCc6J2RhdGEnfQ==
    ]]></artwork>
</figure>

</section>

<section title="Encrypted JSON">
<t>
Some CX JSON object SHOULD be asymmetrically encrypted to ensure that only the recipient can read the JSON object. 
<xref target="JSON_SIMPLE_ENC_1_0">JSON Simple Encryption 1.0</xref> is the default format.
</t>
</section>

<section title="OpenID Extention">
<t>
As an extension of OpenID, CX JSON object must be included as "cx" member of OpenID JSON object.
Beause CX JSON object on OpenID message MUST be signed, "cx" member is actually a token string.
</t>

<figure>
    <artwork><![CDATA[
{
    ... OpenID JSON object parameters ...
    "cx" : "crypto_segment.claim_segment",

}
    ]]></artwork>
</figure>

</section>
</section>
<section title="Structures">
    <section title="Request">
    <t>
Request is a file to declare what Personal Information a Client wants. After Request is delivered to Signatory which End User specified, the contents of Request MUST be displayed to the End User to help him to agree the request and specify the endpoint from which his Personal Infromation is accessed from Client. In special case, Client MAY specify Server and endpoint for Personal Information it wants.
</t>
<t>
Request is a extended <xref target="OPENID_AB">OpenID Artifact Binding 1.0</xref> Request file enveloped by <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref>. 
Every party bound to  Contract MUST prepare  Request in signed token format.
Request shouldfdsa be prepared in the course of the process described in "<xref target="advertising_service">Advertising Service</xref>".
</t>
<t>
Following parameters are placed in a JSON object held by "payload" parameter  of <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref> JSON.
</t>

<t>
    <list style="symbols">
        
            <t> type
                <list style="symbols">
                    
                        <t>string(URI)</t>
                    
                        <t>http://openid.net/specs/cx/1.0/#request"
</t>
                    
                </list>
            </t>
        
            <t> id
                <list style="symbols">
                    
                        <t>optional,string(URI))</t>
                    
                        <t>Identifier for the particular Request file
</t>
                    
                </list>
            </t>
        
            <t> client_id
                <list style="symbols">
                    
                        <t>string(URI)</t>
                    
                        <t>Identifier for Client.
</t>
                    
                </list>
            </t>
        
            <t> server_id
                <list style="symbols">
                    
                        <t>optional,string(URI)</t>
                    
                        <t>Identifier for Server.</t>
                    
                        <t>This parameter MAY be specified only when Client wants End User to permit to use a particular service.  In this case, Client has already known the service endpoint.
</t>
                    
                </list>
            </t>
        
            <t> payment_to
                <list style="symbols">
                    
                        <t>optional,string(any)</t>
                    
                        <t>End User SHOULD be given "payment_to" from  Client for every CX service request to the service endpoint of Contract.
</t>
                    
                </list>
            </t>
        
            <t> payment_from
                <list style="symbols">
                    
                        <t>optional,string(any)</t>
                    
                        <t>End User SHOULD pay  "payment_from" to  Client for every CX service request of Contract.
</t>
                    
                </list>
            </t>
        
            <t> template
                <list style="symbols">
                    
                        <t>optional,string(any)</t>
                    
                        <t>This describes what Client wants as Presonal Information. Also conditions or jurisdic statement SHOULD be stated or refered for utilizing End User's Personal Information.  End User MAY read this text to agree to create  Contract.
</t>
                    
                </list>
            </t>
        
            <t> template_type
                <list style="symbols">
                    
                        <t>optiona,string(Content-Type)</t>
                    
                        <t>Type of text provided by "template". Default is "text/plain".
</t>
                    
                </list>
            </t>
        
            <t> endpoint
                <list style="symbols">
                    
                        <t>optional,string(URI)</t>
                    
                        <t>URI from which data is provieded at Server. Specified only when Client want Personal Information from a specific Server.
</t>
                    
                </list>
            </t>
        
            <t> notify
                <list style="symbols">
                    
                        <t>optional,string(URI)</t>
                    
                        <t>Notifiation endpoint directely called by Party like Propose if Contract is provieded. Notification protocol described in "<xref target="notify_contract_status">Notify Contract Status</xref>" section later.
</t>
                    
                </list>
            </t>
        
            <t> identity
                <list style="symbols">
                    
                        <t>optional,string</t>
                    
                        <t>End user's OpenID identfier at Server.  Mostly is not specified.
</t>
                    
                </list>
            </t>
        
            <t> client_certs
                <list style="symbols">
                    
                        <t>string(base64url)</t>
                    
                        <t>Base64URL formatted string version of client_id's DER( defined in <xref target="X_690">X.690</xref> )  encoded  X.509 certificate used for this <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref> JSON.
</t>
                    
                </list>
            </t>
        
            <t> server_certs
                <list style="symbols">
                    
                        <t>optional,string(base64url)</t>
                    
                        <t>Base64URL formatted string version of server_id's DER( defined in <xref target="X_690">X.690</xref> )  encoded X.509 certificate used when "server_id" specified in Request.</t>
                    
                </list>
            </t>
        
    </list>
</t>

<t>The following is a non-normative sample for CX Request JSON object:</t>

<figure>
    <artwork><![CDATA[
{
    "type": "http://jsonenc.info/jss/",
     ....
    "payload": {
        "type" : "http://openid.net/specs/cx/1.0/#request",   
        "client_id" : "http://rp.net",
        "server_id": "http://op.com",
        "payment_from" : "500JPY",
        "payment_to"     :  "5PT",
        "template" : 
            "...(base64 encoded text for End User to grant the CX contract)..."
        "client_certs" : "...( Base64URL STRING OF client_id's DER ENCODED X.509 CERTIFICATE)...",
        "server_certs" : "...( Base64URL STRING OF server_id's DER ENCODED X.509 CERTIFICATE )...",
        ... ( OTHER OPENID REQUEST PARAMTERS ) ...,
        ... ( OTHER JSON SIMPLE SIGN PARAMTERS ) ...
    }
}
    ]]></artwork>
</figure>
</section>
<section title="Proposal">
    <t>
Proposal is a contrainer JSON to hold Request Token of parties from all Client.  
Proposal itself MUST be a Token to be conveyed in OpenID Artifact Binding request file to Signatory.
</t>

<t>
Following parameters are placed in a JSON object held by "payload" parameter  of <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref> JSON.
</t>

<t>
    <list style="symbols">
        
            <t> type
                <list style="symbols">
                    
                        <t>string(URI)</t>
                    
                        <t>http://openid.net/specs/cx/1.0/#proposal
</t>
                    
                </list>
            </t>
        
            <t> id
                <list style="symbols">
                    
                        <t>string(URI)</t>
                    
                        <t>unique identifier for a specific Proposal specified by Proposer
</t>
                    
                </list>
            </t>
        
            <t> proposer_id
                <list style="symbols">
                    
                        <t>string(URI)</t>
                    
                        <t>Identifier for Proposer
</t>
                    
                </list>
            </t>
        
            <t> reqs
                <list style="symbols">
                    
                        <t>array of object( <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref> )</t>
                    
                        <t>JSON array of Requests Token.
</t>
                    
                </list>
            </t>
        
            <t> notify
                <list style="symbols">
                    
                        <t>optional,string(URI)</t>
                    
                        <t>Signatory MAY directly send message to this URI.  As described later in "<xref target="notify_contract_status">Notify Contract Status</xref>" section later, Signatory MAY notify the status of  Contract to Proposer.
</t>
                    
                </list>
            </t>
        
            <t> proposer_certs
                <list style="symbols">
                    
                        <t>string(base64url)</t>
                    
                        <t>Base64URL formatted string version of Proposer's DER (defined in <xref target="X_690">X.690</xref> ) encoded X.509 certificate used for this <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref> envelope.</t>
                    
                </list>
            </t>
        
    </list>
</t>

<t>The following is a non-normative sample for Proposal JSON object:</t>

<figure>
    <artwork><![CDATA[
{
    "type": "http://jsonenc.info/jss/",
     ....
    "payload": {
      "type": "http://openid.net/specs/cx/1.0/#proposal",
      "id" : "http://rp.net/432143214321",
      "proposer_id" : "http://rp.net/",
      "reqs": [ 
        "6a82841eea9c17677083b2965bc4e51e0e8e22e208121ab69711b3e5918c6677.eyAndGVzdCc6J2RhdGEnfQ==",
        "1cf28c36f7fbb9e97828a687706cd14458d4b81713264d12852a0c8a669bee78.eyAnc2FtcGxlJzondGhlIG90aGVyJ30=",
      ] 
      "proposer_certs": "...( BASE64URL STRING OF PROPOSER's DER ENCODED X.509 CERTIFICATE )...",
      .... ( OTHER EXTENDED PROPOSAL JSON MEMBERS )...

    }
}
    ]]></artwork>
</figure>

</section>
<section title="Acceptance">
    <t>
Acceptance is a response file of original Request "payload" and describes what is End User's PPID, where End User's Personal Information comes from and any other data required to response End User's Personal Information by Server.

Signatory MUST produce two Acceptances for a single Request, one is for Client's Contract Part and the other is for Server's Contract Part.
Personal information like canonical identifier SHOULD be different from each other.
</t>

<t>
Other paramters  than the following have same meaning as ones defined in Request.
</t>
<t>
    <list style="symbols">
        
            <t> type
                <list style="symbols">
                    
                        <t>string(URI)</t>
                    
                        <t>"http://openid.net/specs/cx/1.0/#acceptance"
</t>
                    
                </list>
            </t>
        
            <t> id
                <list style="symbols">
                    
                        <t>string(URI)</t>
                    
                        <t>unique identifier given by Signatory
</t>
                    
                </list>
            </t>
        
            <t> request_id
                <list style="symbols">
                    
                        <t>string(URI)</t>
                    
                        <t>Identifier to refer to original Request.</t>
                    
                </list>
            </t>
        
    </list>
</t>

<t>The following is a non-normative sample for Acceptance object:</t>

<figure>
    <artwork><![CDATA[
{
    "type"              : "http://openid.net/specs/cx/1.0/#acceptance",   
    "client_id"         : "http://rp.net",
    "server_id"         : "http://op.com",
    "payment_from"      : "500JPY",
    "payment_to"        :  "5PT",
    "template"          :
       " ... (base64 encoded text for End User to grant the CX contract)....",
    "request_id"        : "http://rp.net/proposal/i393", 
    "endpoint"          : "http://op.com/endpoint/",
    "identity"          : "http://op.com/user/g3430",
    ...( OTHER OPENID REQUEST PARAMTERS ) ...,
}
    ]]></artwork>
</figure>

</section>
<section title="Contract Part">
    <t>
Contract Part is container JSON object of Acceptances and enveloped by <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref>. 
Contract Part is a part of Contract  and provided for each Party by Signatory. All Contract Part shares a Contract Indenfier.
</t>

<t>
Following parameters are placed in a JSON object held by "payload" parameter  of <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref> JSON.
</t>

<t>
    <list style="symbols">
        
            <t> type
                <list style="symbols">
                    
                        <t>string(URI)</t>
                    
                        <t>http://openid.net/specs/cx/1.0/#contract_part
</t>
                    
                </list>
            </t>
        
            <t> id
                <list style="symbols">
                    
                        <t>opitinal,string(URI)</t>
                    
                        <t>Identifier to this Contract Part
</t>
                    
                </list>
            </t>
        
            <t> contract_id
                <list style="symbols">
                    
                        <t>string(URI)</t>
                    
                        <t>Unique URL given by Signatory. All Contract Part provided to each Party for a Proposal MUST be same.
</t>
                    
                </list>
            </t>
        
            <t> party_id
                <list style="symbols">
                    
                        <t>string(URI)</t>
                    
                        <t>client_id, server_id or proposer_id of this Contract.
</t>
                    
                </list>
            </t>
        
            <t> proposal_id
                <list style="symbols">
                    
                        <t>string(URI)</t>
                    
                        <t>Identifier to original Proposal. The signature segment of the original Proposal Token  MUST be appended to the end of the original Proposal URI as URI fragment.
</t>
                    
                </list>
            </t>
        
            <t> acceptances
                <list style="symbols">
                    
                        <t>array of object(Acceptance)</t>
                    
                        <t>JSON array of Acceptance JSON object.
</t>
                    
                </list>
            </t>
        
            <t> signatory_certs
                <list style="symbols">
                    
                        <t>string(base64url)</t>
                    
                        <t>Base64URL formatted string of Signatory's DER( defined in <xref target="X_690">X.690</xref> ) encoded X.509 certificate used for this <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref> JSON.</t>
                    
                </list>
            </t>
        
    </list>
</t>

<t>The following is a non-normative sample for Contract Part object:</t>

<figure>
    <artwork><![CDATA[
{
    "type": "http://jsonenc.info/jss/",
     ....
    "payload": {
        "type"        : "http://openid.net/specs/cx/1.0/#contract",
        "id"          : "http://op.com/id/f43213214",
        "contract_id" : "http://op.com/id/contract/x43513514",
        "party_id"    : "http://res.net/",
        "acceptances" : [
                {
                    "type"      : "http://openid.net/specs/cx/1.0/#acceptance",
                    "id"        : "http://op.com/id/f43213215",
                    "client_id" : "http://rp1.net/",
                    "server_id" : "http://res.net/",
                    "endpoint"  : "http://res.net/endpoint/",
                    "identity"  : "http://op.com/user/x43432",
                        .....
                    
                },
                {
                    "type"      : "http://openid.net/specs/cx/1.0/#acceptance",
                    "id"        : "http://op.com/id/f43213216",
                    "client_id" : "http://rp2.net/",
                    "server_id" : "http://res.net/",
                    "endpoint"  : "http://res.net/endpoint/",
                    "identity"  : "http://op.com/user/y43432",
                        .....
                }
            ],
            "signatory_certs" 
                : ".... ( BASE64URL STRING OF SIGNATORY's DER ENCODED X.509 CERTIFICATE ) ...",
    
            ... ( OTHER JSON SIMPLE SIGN PARAMTERS ) ...
        }
    }
}
    ]]></artwork>
</figure>
</section>
<section title="Status">
    <t>
Status  is a simple JSON object to describe the status of Contract.
</t>

<t>
    <list style="symbols">
        
            <t> type
                <list style="symbols">
                    
                        <t>string(URI)</t>
                    
                        <t>http://openid.net/specs/cx/1.0/#status
</t>
                    
                </list>
            </t>
        
            <t> proposal_id
                <list style="symbols">
                    
                        <t>optional,string(URI)</t>
                    
                        <t>This identifier is an unique identifier referring Proposal which Contract is being created for.
</t>
                    
                </list>
            </t>
        
            <t> contract_id
                <list style="symbols">
                    
                        <t>string(URI)</t>
                    
                        <t>This identifier is an unique identifier referring Contract.
</t>
                    
                </list>
            </t>
        
            <t> status
                <list style="symbols">
                    
                        <t>string</t>
                    
                        <t>status description about proposal or contract.</t>
                    
                        <t>One of the following : "contract_created","contract_discarded","contract_pending","contract_inquiring".</t>
                    
                </list>
            </t>
        
    </list>
</t>

<t>The following is a non-normative sample for Status object:</t>

<figure>
    <artwork><![CDATA[
{
    "type" :  "http://openid.net/specs/cx/1.0/#status",
    "proposal_id" :  "http://rp.net/cx/54643",
    "contract_id" : "http://op.com/contract/f43213214",
    "status" : "pending" , 
     ...    (other  JSON MEMBERS )   ...
}
    ]]></artwork>
</figure>


</section>

</section>
<section title="Storage and Timestamping">
    <t>
The Contract is supposed to act as a proof of agreement in case of dispute at a later date. 
Since contracts may be long term documents, there is a risk that are not so relevant in transient processing, 
such as Algorithm Compromise. Thus, care should be taken to appropriately process the contract through Timestamping etc.</t>

</section>
    </section>

    <section title="Protocal">
        <section title="Sending Proposal">
    <section title="Advertising Service" anchor="advertising_service">

<t>Before advertising CX Service, Proposer  MUST collect all Request token related to that Service. 
Some Request token MAY be provided by any party other than the Proposeritself.</t>

<t>
Proposer SHOULD provide an user interface like image button for End Users to click to go to the Service and Proposer starts providing Proposal and CX process.
</t>

<t>
Also Signatory party MUST advertise it can be a OpenID CX Signatory OP. In the case of using XRDS, Type element MUST be http://openid.net/specs/cx/1.0/.
</t>
</section>

<section title="Providing CX Proposal">

<t>
When an End User visits the particular CX Service at the Proposer, the Proposer firstly composes a Proposal for the End User. 
All Request Token to be bound to the Contract MUST be included in "reqs" member of Proposal JSON object. 
Proposal JSON MUST be finally singed into a Proposal Token.
</t>
</section>


<section title="Start OpenID Artifact Binding Session">

<t>
A Proposal Token is a extension of OpenID Artifact Binding. It SHOULD be a member of Artifact Binding Request file JSON object like in the following sample JSON:
</t>


<figure>
    <artwork><![CDATA[
{
    ...( OPENID ARTIFACT BINDING  REQUEST FILE JSON MEMBERS ) ...,
    "cx" : "crypto_segment_of_cx_proposal_token.claim_segment_of_cx_proposal_token",
}
    ]]></artwork>
</figure>

<t>
OpenID authentication request session MUST be started to the Signatory specified by the End User at the Proposer's CX Service page.
</t>
</section>
</section>
<section title="Accepting Proposal">
    <section title="Accepting OpenID Artifact Binding Request">

<t>When an End User request a OpenID Artifact Binding request or a Proposer directly sends Request Registration request, Signatory SHOULD check if that request includes extensions named "cx".
</t>

</section>


<section title="Verify Proposal">

<t>
If OpenID request file containes "cx" extension,the Proposal Token signature MUST be verified in the way described in <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref>.
</t>
<t>
All Reqeust Tokens in "reqs" array MUST be verified. 
</t>

<section title="Policy Based Contract">
<t>
If End User configures his/her policy at Signatory to issued Contract for specific claims's condition, Signatory MAY issue Contract without authenticating End User. Signatory MAY return OpenID Assertion including CX Contract in such case. 
</t>
</section>

</section>

<section title="Grants from Authenticated End User">
<t>
If Proposal and all Requests in it are valid, End User MUST be authenticated. Signatory MUST display "template" what exactly each Party requests to the authenticated End User. To compose a Contract, the End User MUST agree the content displayed by Signatory.
</t>

</section>

<section title="Compose Acceptance for Each Request">

<t>
If End User agrees, Signatory creates two Acceptance JSON objects for each Request, one for Client and the other for Server.
Personal information parameter MAY be different from each other.
</t>

</section>


<section title="Compose Contracts">

<t>
Signatory provides Contract Part JSON objects for all Parties. Each Contract Part  shares unique URI, Contract Identifier,  as "contract_id" member of it. 
All Acceptance JSON objects are stored in "acceptances" array member of that JSON object.
</t>

<t>
The original Proposal MUST be refered as "proposal_id" with its identifier. The digest segment of the Proposal Token MUST be appended as URI fragment.
</t>

<t>
Signatory MUST publish Contract Part in exchange for "contract_id" and "party_id" from a Party in the form of Contract Token which is the product of <xref target="JSON_SIMPLE_ENC_1_0">JSON Simple Encryption 1.0</xref>.
</t>

</section>
</section>
<section title="Receiving Contract">
    <section title="Responding a CX Contract in OpenID Assertion">
<t>
If Proposer as RP request OpenID Artifact Binding assertion request and there is a Contract Part Token to be bound to that, the OP as  Signatory MUST return it as a "cx" member of the assertion JSON object.
</t>


<figure>
    <artwork><![CDATA[
{
    ...( OPENID ARTIFACT BINDING  ASSERTION JSON MEMBERS ) ...,
    "cx" : "crypto_segment_of_cx_contract_part_token.claim_segment_of_cx_contract_part_token",
}
    ]]></artwork>
</figure>


<t>
But if no Contract Part is available at the time when RP requests the assertion, OP MUST return Status JSON object as "cx" member of assertion JSON object.
</t>


<figure>
    <artwork><![CDATA[
{
    ...( OPENID ARTIFACT BINDING  ASSERTION JSON MEMBERS ) ...,
    "cx" : {
                "type" :   "http://openid.net/specs/cx/1.0/#status",
                 ... ( OTHER CX STATUS JSON MEMBERS ) ...
             } 
}
    ]]></artwork>
</figure>

</section>

<section title="Verifying Contract">

<t>
If the "cx" member of assertion JSON object is a Contract Part Token string , Proposer  MUST verify the signature of <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref> first. Proposer MUST store the Contract Part Token if it is valid <xref target="JSON_SIMPLE_SIGN_1_0">JSON Simple Sign 1.0</xref>.
</t>


<t>
Proposer SHOULD explain to the End User that a Contract has been successfully created and now Proposer or Cleints is ready to request data according to the Contract.
</t>

<t>
If the "cx" member is a Status JSON object, Proposer SHOULD explain to the End User that a Contract has not been created yet at Signagory  and the reason by "status" member of Status JSON object. Signatory MAY be notified later that the Contract is created by the Signatory.
</t>

</section>

</section>

<section title="Notify Contract Status" anchor="notify_contract_status"  >
    <t>
Signatory and other Party MAY send the status of Contract to the endpoint specified by "notify" member of Proposal or Request. 
"status" query parameter MUST be a Status JSON object.
</t>

<t>
Signatory and Party MAY request their Contract Party Token using Data Request mechanism.
</t>
</section>

<section title="Data Request">
    <section title="CX Data Request">

<section title="Endpoint">
<t>
Client MAY request data from a endpoint exposed by Server bound to the same Contract.  
The endpoint of End User's Personal Information is specified "endpoint" parameter of Request and Acceptance JSON. 
</t>
<t>
Access log records MAY be requested in the same endpoint when "log" parameter is set to "true".
</t>
<t>
Also Party MAY request its Contract Part Token dicrectly to Signagory. The endpoint URL for Contract Part Token  is "contract_id" itself.
</t>
</section>

<section title="Parameters">
<t>CX data request parameters to be sent to URI described "Endpoint" section  are definend in the following.</t>
<t>
    <list style="symbols">
        
            <t> party_id
                <list style="symbols">
                    
                        <t>REQUIRED Value: An identfier of Party. Server MUST encrypt Personal Information with the public key of Client in the way defined in <xref target="JSON_SIMPLE_ENC_1_0">JSON Simple Encryption 1.0</xref> .
</t>
                    
                </list>
            </t>
        
            <t> contract_id
                <list style="symbols">
                    
                        <t>REQUIRED.  Value: Contract identfier.
</t>
                    
                </list>
            </t>
        
            <t> log
                <list style="symbols">
                    
                        <t>Optional. If this is set "true", access log records MUST be returned.
</t>
                    
                </list>
            </t>
        
            <t> from
                <list style="symbols">
                    
                        <t>Optional. This is the "from date" of access log records to be returned.
</t>
                    
                </list>
            </t>
        
            <t> to
                <list style="symbols">
                    
                        <t>Optional. This is the "to date" of access log records to be returned.</t>
                    
                </list>
            </t>
        
    </list>
</t>
</section>

<section title="Encrypted Response">
<t>
Data response MUST be formed in <xref target="JSON_SIMPLE_ENC_1_0">JSON Simple Encryption 1.0</xref> and encrypted for "party" in the request. Personal Information, Contract Part Token and access log MUST be returned in <xref target="JSON_SIMPLE_ENC_1_0">JSON Simple Encryption 1.0</xref> with using valid public key of specified party.
</t>
</section>


<section title="Access Log Record Format">
    <t>
Every data endpoint MUST provide access log record if it is requested by Signatory.
Access log records MUST be also encrypted in <xref target="JSON_SIMPLE_ENC_1_0">JSON Simple Encryption 1.0</xref>.
</t>
<t>
Access log is JSON structured with followng parameters.
</t>
<t>
    <list style="symbols">
        
            <t> type
                <list style="symbols">
                    
                        <t>OPTIONAL,string(URI)</t>
                    
                        <t>This can be negotiable with this parameter between Parities, but default is http://openid.net/specs/cx/1.0/
</t>
                    
                </list>
            </t>
        
            <t> logs
                <list style="symbols">
                    
                        <t>Any type because negotiable with "type" parameters.</t>
                    
                </list>
            </t>
        
    </list>
</t>

<t>
Default "log" parameter is an array of arrays in which following data are contained in order.
</t>
<t>
    <list style="symbols">
        
            <t> msg_id
                <list style="symbols">
                    
                        <t>Unique identifier for the endpoint given by data providing party.
</t>
                    
                </list>
            </t>
        
            <t> request_id
                <list style="symbols">
                    
                        <t>Personal information request msg_id specified by requesting party.
</t>
                    
                </list>
            </t>
        
            <t> contract_id
                <list style="symbols">
                    
                        <t>Contract identifier.
</t>
                    
                </list>
            </t>
        
            <t> party
                <list style="symbols">
                    
                        <t>requesting party
</t>
                    
                </list>
            </t>
        
            <t> datetime
                <list style="symbols">
                    
                        <t>requested date and time.
</t>
                    
                </list>
            </t>
        
            <t> status
                <list style="symbols">
                    
                        <t>response status.
</t>
                    
                </list>
            </t>
        
            <t> reason
                <list style="symbols">
                    
                        <t>reason of the status</t>
                    
                </list>
            </t>
        
    </list>
</t>

<t>
The following is a non-normative sample of access log.
</t>
<figure>
    <artwork><![CDATA[
{
     "type" : "http://openid.net/specs/cx/1.0/#access_log",   
     "logs"  : [
        [ "http://sp.com/res/4321","http://rp.com/req/343","http://op.com/contract/93",
            "http://rp.com/",'2010-10-13T05:10:38+09:00',"200 OK",""],
        [ "http://sp.com/res/4322","http://rp.com/req/344","http://op.com/contract/93",
            "http://rp.com/",'2010-10-13T05:10:40+09:00',"200 OK",""],
     ]
}
    ]]></artwork>
</figure>

</section>

</section>
</section>
    </section>

    <section title="Security Considerations">
        
<section title="non-repudiation">
<t>
Since CX is a message oriented public key based signing protocol, it offers non-repudiation unlike plain OpenID Authentication 2.0.
</t>
</section>

<section title="Man-in-the-middle">
<t>
A RP must verify the validity of the OP's identity and public key and vice versa.
</t>
</section>

  
<section title="Eavesdropping">
<t>
When encryption mode is used, the payload is encrypted and only the real recipient can decipher it. Thus, obtaining sensitive data through eavesdropping is very difficult.

</t>
</section>
  
<section title="Malicious Providers">
<t>
Malicious Providers that is behaving correctly according to this protocol cannot be coped within this protocol. It has to do the checking of the certificate with some assurance services and/or reputation services including RBL and white list.
</t>
</section>

<section title="Phishing Attack"> 
<t>
Phishing attack is a social engineering, so it should in principle be dealt with the non-knowledge-based authentication mechanism. This is clearly out of scope of this extension.
</t>
</section>
  
<section title="Private Key Compromise">
<t>
In the unlikely event of private key compromise, the party should immediately notify the CA as well as the counter party stated in the Contract document. This will minimize the damage by the incident.
</t>
</section>
    </section>

    <appendix title="Acknowledgements">
        
    </appendix>

  </middle>
  <back>
    <references title="Normative References">
      <reference anchor="RFC2119">
        <front>
          <title>Key words for use in RFCs to Indicate Requirement
          Levels</title>

          <author fullname="Scott Bradner" initials="B.S" surname="Bradner">
            <organization>Alis Technologies</organization>
          </author>

          <date year="1997" />
        </front>

        <seriesInfo name="RFC" value="2119" />
      </reference>

      <reference anchor="OpenIDAuthentication2.0">
        <front>
          <title>OpenID Authentication 2.0</title>

          <author fullname="specs@openid.net" initials=""
                  surname="specs@openid.net">
            <organization></organization>
          </author>

          <date year="2007" />
        </front>

        <format target="http://www.openid.net/specs/openid-authentication-2_0.txt"
                type="TXT" />

        <format target="http://www.openid.net/specs/openid-authentication-2_0.html"
                type="HTML" />
      </reference>

      <reference anchor="Yadis">
        <front>
          <title>Yadis Specification 1.0</title>

          <author fullname="Joaquin Miller" initials="J.M" role="editor"
                  surname="Miller">
            <organization>NetMesh</organization>
          </author>

          <date year="2005" />
        </front>

        <format target="http://yadis.org/papers/yadis-v1.0.pdf" type="PDF" />

        <format target="http://yadis.org/papers/yadis-v1.0.odt" type="ODT" />
      </reference>

      <reference anchor="XRIResolution2.0">
        <front>
          <title>Extensible Resource Identifier (XRI) Resolution Version
          2.0</title>

          <author fullname="Drummond Reed" initials="D.R" surname="Reed">
            <organization>Cordance</organization>
          </author>

          <author fullname="Gabe Wachob" initials="G.W" role="editor"
                  surname="Wachob">
            <organization>Visa International</organization>
          </author>

          <date month="April" year="2008" />
        </front>

        <format target="http://docs.oasis-open.org/xri/2.0/specs/cd02/xri-resolution-V2.0-cd-02.pdf"
                type="PDF" />
      </reference>

      <reference anchor="JSON">
        <front>
          <title>The application/json Media Type for JavaScript Object Notation (JSON) </title>
          <author fullname="Douglas Crockford" >
            <organization></organization>
          </author>
        </front>
        <seriesInfo name="RFC" value="4627" />
      </reference>

      <reference anchor="RFC3339">
        <front>
          <title>Date and Time on the Internet: Timestamps</title>

          <author fullname="Graham Klyne" initials="G.K" surname="Klyne">
            <organization>Clearswift Corporation</organization>
          </author>

          <author fullname="Chris Newman" initials="C.N" surname="Newman">
            <organization>Sun Microsystems</organization>
          </author>
        </front>

        <seriesInfo name="RFC" value="3339" />
      </reference>

      <reference anchor="RFC2898">
        <front>
          <title>PKCS #5: Password-Based Cryptography Specification Version
          2.0</title>

          <author fullname="Burt " initials="B.K" surname="Kaliski ">
            <organization></organization>
          </author>

          <date month="September" year="2000" />
        </front>
      </reference>

      <reference anchor="OPENID_AB">
        <front>
          <title> OpenID Artifact Binding 1.0 </title>

          <author fullname="John BradeleyBurt" >
            <organization>Protivity Government Services</organization>
          </author>

          <author fullname="Nat Sakimura" >
            <organization>Nomura Research Institute</organization>
          </author>

          <date month="September" year="2010" />
        </front>
        <format target="http://bitbucket.org/openid/ab/raw/4325e6a219dd/openid-artifact-binding-1_0.html" type="HTML" />
      </reference>

      <reference anchor="JSON_SIMPLE_SIGN_1_0">
        <front>
          <title>JSON Simple Sign ver.1 draft00</title>

          <author fullname="John BradeleyBurt" >
            <organization>Protivity Government Services</organization>
          </author>

          <author fullname="Nat Sakimura" >
            <organization>Nomura Research Institute</organization>
          </author>

          <date month="September" year="2010" />
        </front>
        <format target="http://bitbucket.org/openid/ab/raw/4325e6a219dd/json-simple-sign-1_0.html" type="HTML" />
      </reference>


      <reference anchor="JSON_SIMPLE_ENC_1_0">
        <front>
          <title>JSON Simple Encryption ver.1 draft00</title>

          <author fullname="John BradeleyBurt" >
            <organization>Protivity Government Services</organization>
          </author>

          <author fullname="Nat Sakimura" >
            <organization>Nomura Research Institute</organization>
          </author>

          <date month="September" year="2010" />
        </front>
        <format target="http://bitbucket.org/openid/ab/raw/4325e6a219dd/json-simple-enc-1_0.html" type="HTML" />
      </reference>

    
      <reference anchor="X_690">
        <front>
          <title> X.690 : Information technology - ASN.1 encoding rules: Specification of Basic Encoding Rules (BER), Canonical Encoding Rules (CER) and Distinguished Encoding Rules (DER)</title>
            <author fullname="ITU">
                <organization>INTERNATIONAL TELECOMMUNICATION UNION</organization>
            </author>
          <date month="July" year="2002" />
        </front>
        <format target="http://www.itu.int/rec/T-REC-X.690-200207-S/en" type="PDF" />
      </reference>

      <reference anchor="OAEP">
        <front>
          <title>Optimal Asymmetric Encryption -- How to encrypt with RSA.
          Extended abstract in Advances in Cryptology - Eurocrypt '94
          Proceedings, Lecture Notes in Computer Science Vol. 950, A. De
          Santis ed, Springer-Verlag, 1995</title>

          <author fullname="Mihir " initials="M.B" surname="Bellare">
            <organization></organization>
          </author>

          <author fullname="Phillip " initials="P.R" surname="Rogaway">
            <organization></organization>

            <address>
              <postal>
                <street></street>

                <city></city>

                <region></region>

                <code></code>

                <country></country>
              </postal>

              <phone></phone>

              <facsimile></facsimile>

              <email></email>

              <uri></uri>
            </address>
          </author>

          <date year="1995" />
        </front>
      </reference>
    </references>
  </back>
</rfc>